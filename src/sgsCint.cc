//
// File generated by rootcint at Tue Nov  9 12:14:22 2010

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "sgsCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void ScintHitInfo_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_ScintHitInfo(void *p = 0);
   static void *newArray_ScintHitInfo(Long_t size, void *p);
   static void delete_ScintHitInfo(void *p);
   static void deleteArray_ScintHitInfo(void *p);
   static void destruct_ScintHitInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ScintHitInfo*)
   {
      ::ScintHitInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ScintHitInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ScintHitInfo", ::ScintHitInfo::Class_Version(), "./include/../include/ScintHitInfo.hh", 13,
                  typeid(::ScintHitInfo), DefineBehavior(ptr, ptr),
                  &::ScintHitInfo::Dictionary, isa_proxy, 4,
                  sizeof(::ScintHitInfo) );
      instance.SetNew(&new_ScintHitInfo);
      instance.SetNewArray(&newArray_ScintHitInfo);
      instance.SetDelete(&delete_ScintHitInfo);
      instance.SetDeleteArray(&deleteArray_ScintHitInfo);
      instance.SetDestructor(&destruct_ScintHitInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ScintHitInfo*)
   {
      return GenerateInitInstanceLocal((::ScintHitInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ScintHitInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void WorldSetup_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_WorldSetup(void *p = 0);
   static void *newArray_WorldSetup(Long_t size, void *p);
   static void delete_WorldSetup(void *p);
   static void deleteArray_WorldSetup(void *p);
   static void destruct_WorldSetup(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WorldSetup*)
   {
      ::WorldSetup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WorldSetup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WorldSetup", ::WorldSetup::Class_Version(), "./include/../include/WorldSetup.hh", 13,
                  typeid(::WorldSetup), DefineBehavior(ptr, ptr),
                  &::WorldSetup::Dictionary, isa_proxy, 4,
                  sizeof(::WorldSetup) );
      instance.SetNew(&new_WorldSetup);
      instance.SetNewArray(&newArray_WorldSetup);
      instance.SetDelete(&delete_WorldSetup);
      instance.SetDeleteArray(&deleteArray_WorldSetup);
      instance.SetDestructor(&destruct_WorldSetup);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WorldSetup*)
   {
      return GenerateInitInstanceLocal((::WorldSetup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WorldSetup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *ScintHitInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ScintHitInfo::Class_Name()
{
   return "ScintHitInfo";
}

//______________________________________________________________________________
const char *ScintHitInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ScintHitInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ScintHitInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ScintHitInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ScintHitInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ScintHitInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ScintHitInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ScintHitInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *WorldSetup::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *WorldSetup::Class_Name()
{
   return "WorldSetup";
}

//______________________________________________________________________________
const char *WorldSetup::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WorldSetup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int WorldSetup::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WorldSetup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void WorldSetup::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WorldSetup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *WorldSetup::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WorldSetup*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void ScintHitInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class ScintHitInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ScintHitInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(ScintHitInfo::Class(),this);
   }
}

//______________________________________________________________________________
void ScintHitInfo::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class ScintHitInfo.
      TClass *R__cl = ::ScintHitInfo::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "side", &side);
      R__insp.Inspect(R__cl, R__parent, "plane", &plane);
      R__insp.Inspect(R__cl, R__parent, "strip", &strip);
      R__insp.Inspect(R__cl, R__parent, "truePos[3]", truePos);
      R__insp.Inspect(R__cl, R__parent, "energyDep", &energyDep);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ScintHitInfo(void *p) {
      return  p ? new(p) ::ScintHitInfo : new ::ScintHitInfo;
   }
   static void *newArray_ScintHitInfo(Long_t nElements, void *p) {
      return p ? new(p) ::ScintHitInfo[nElements] : new ::ScintHitInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_ScintHitInfo(void *p) {
      delete ((::ScintHitInfo*)p);
   }
   static void deleteArray_ScintHitInfo(void *p) {
      delete [] ((::ScintHitInfo*)p);
   }
   static void destruct_ScintHitInfo(void *p) {
      typedef ::ScintHitInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ScintHitInfo

//______________________________________________________________________________
void WorldSetup::Streamer(TBuffer &R__b)
{
   // Stream an object of class WorldSetup.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(WorldSetup::Class(),this);
   } else {
      R__b.WriteClassBuffer(WorldSetup::Class(),this);
   }
}

//______________________________________________________________________________
void WorldSetup::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class WorldSetup.
      TClass *R__cl = ::WorldSetup::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "minervaStrips", &minervaStrips);
      R__insp.Inspect(R__cl, R__parent, "muonGenerationArea", &muonGenerationArea);
      R__insp.Inspect(R__cl, R__parent, "worldSize", &worldSize);
      R__insp.Inspect(R__cl, R__parent, "scintLength", &scintLength);
      R__insp.Inspect(R__cl, R__parent, "planesPerSide", &planesPerSide);
      R__insp.Inspect(R__cl, R__parent, "stripsPerPlane", &stripsPerPlane);
      R__insp.Inspect(R__cl, R__parent, "planeWidth", &planeWidth);
      R__insp.Inspect(R__cl, R__parent, "gapBetweenPlanes", &gapBetweenPlanes);
      R__insp.Inspect(R__cl, R__parent, "verticalSeparation", &verticalSeparation);
      R__insp.Inspect(R__cl, R__parent, "scintTriBase", &scintTriBase);
      R__insp.Inspect(R__cl, R__parent, "scintTriHeight", &scintTriHeight);
      R__insp.Inspect(R__cl, R__parent, "scintTriLengthX", &scintTriLengthX);
      R__insp.Inspect(R__cl, R__parent, "scintTriLengthY", &scintTriLengthY);
      R__insp.Inspect(R__cl, R__parent, "numScintTriX", &numScintTriX);
      R__insp.Inspect(R__cl, R__parent, "numScintTriY", &numScintTriY);
      R__insp.Inspect(R__cl, R__parent, "background", &background);
      R__insp.Inspect(R__cl, R__parent, "sphereRadius", &sphereRadius);
      R__insp.Inspect(R__cl, R__parent, "sphereDensity", &sphereDensity);
      R__insp.Inspect(R__cl, R__parent, "sphereOriginX", &sphereOriginX);
      R__insp.Inspect(R__cl, R__parent, "sphereOriginY", &sphereOriginY);
      R__insp.Inspect(R__cl, R__parent, "sphereOriginZ", &sphereOriginZ);
      R__insp.Inspect(R__cl, R__parent, "realOrFakeContainer", &realOrFakeContainer);
      R__insp.Inspect(R__cl, R__parent, "waterTankFlag", &waterTankFlag);
      R__insp.Inspect(R__cl, R__parent, "steelBoxFlag", &steelBoxFlag);
      R__insp.Inspect(R__cl, R__parent, "waterBoxHalfSide", &waterBoxHalfSide);
      R__insp.Inspect(R__cl, R__parent, "waterBoxSteelThickness", &waterBoxSteelThickness);
      R__insp.Inspect(R__cl, R__parent, "steelBoxX", &steelBoxX);
      R__insp.Inspect(R__cl, R__parent, "steelBoxY", &steelBoxY);
      R__insp.Inspect(R__cl, R__parent, "steelBoxZ", &steelBoxZ);
      R__insp.Inspect(R__cl, R__parent, "steelBoxHalfSide", &steelBoxHalfSide);
      R__insp.Inspect(R__cl, R__parent, "steelThickness", &steelThickness);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WorldSetup(void *p) {
      return  p ? new(p) ::WorldSetup : new ::WorldSetup;
   }
   static void *newArray_WorldSetup(Long_t nElements, void *p) {
      return p ? new(p) ::WorldSetup[nElements] : new ::WorldSetup[nElements];
   }
   // Wrapper around operator delete
   static void delete_WorldSetup(void *p) {
      delete ((::WorldSetup*)p);
   }
   static void deleteArray_WorldSetup(void *p) {
      delete [] ((::WorldSetup*)p);
   }
   static void destruct_WorldSetup(void *p) {
      typedef ::WorldSetup current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::WorldSetup

/********************************************************
* ./src/sgsCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablesgsCint();

extern "C" void G__set_cpp_environmentsgsCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("../include/ScintHitInfo.hh");
  G__add_compiledheader("../include/WorldSetup.hh");
  G__cpp_reset_tagtablesgsCint();
}
#include <new>
extern "C" int G__cpp_dllrevsgsCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ScintHitInfo */
static int G__sgsCint_136_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ScintHitInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ScintHitInfo[n];
     } else {
       p = new((void*) gvp) ScintHitInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ScintHitInfo;
     } else {
       p = new((void*) gvp) ScintHitInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ScintHitInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ScintHitInfo(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) ScintHitInfo(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ScintHitInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ScintHitInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ScintHitInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ScintHitInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ScintHitInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ScintHitInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ScintHitInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ScintHitInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_136_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ScintHitInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sgsCint_136_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ScintHitInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ScintHitInfo(*(ScintHitInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ScintHitInfo G__TScintHitInfo;
static int G__sgsCint_136_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ScintHitInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ScintHitInfo*) (soff+(sizeof(ScintHitInfo)*i)))->~G__TScintHitInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ScintHitInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ScintHitInfo*) (soff))->~G__TScintHitInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sgsCint_136_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ScintHitInfo* dest = (ScintHitInfo*) G__getstructoffset();
   *dest = *(ScintHitInfo*) libp->para[0].ref;
   const ScintHitInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WorldSetup */
static int G__sgsCint_137_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WorldSetup* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WorldSetup[n];
     } else {
       p = new((void*) gvp) WorldSetup[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WorldSetup;
     } else {
       p = new((void*) gvp) WorldSetup;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__sgsCintLN_WorldSetup);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WorldSetup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WorldSetup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WorldSetup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WorldSetup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WorldSetup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WorldSetup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WorldSetup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WorldSetup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sgsCint_137_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WorldSetup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sgsCint_137_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   WorldSetup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new WorldSetup(*(WorldSetup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__sgsCintLN_WorldSetup);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WorldSetup G__TWorldSetup;
static int G__sgsCint_137_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WorldSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WorldSetup*) (soff+(sizeof(WorldSetup)*i)))->~G__TWorldSetup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WorldSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WorldSetup*) (soff))->~G__TWorldSetup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sgsCint_137_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WorldSetup* dest = (WorldSetup*) G__getstructoffset();
   *dest = *(WorldSetup*) libp->para[0].ref;
   const WorldSetup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ScintHitInfo */

/* WorldSetup */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncsgsCint {
 public:
  G__Sizep2memfuncsgsCint(): p(&G__Sizep2memfuncsgsCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncsgsCint::*p)();
};

size_t G__get_sizep2memfuncsgsCint()
{
  G__Sizep2memfuncsgsCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancesgsCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo))) {
     ScintHitInfo *G__Lderived;
     G__Lderived=(ScintHitInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo),G__get_linked_tagnum(&G__sgsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sgsCintLN_WorldSetup))) {
     WorldSetup *G__Lderived;
     G__Lderived=(WorldSetup*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sgsCintLN_WorldSetup),G__get_linked_tagnum(&G__sgsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablesgsCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__sgsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__sgsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__sgsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__sgsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ScintHitInfo */
static void G__setup_memvarScintHitInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo));
   { ScintHitInfo *p; p=(ScintHitInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"side=",0,"0 is top, 1 is bottom");
   G__memvar_setup((void*)((long)(&p->plane)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"plane=",0,"Which scintillator plane in stack");
   G__memvar_setup((void*)((long)(&p->strip)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"strip=",0,"Which strip in scintillator plane");
   G__memvar_setup((void*)((long)(&p->truePos)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"truePos[3]=",0,"The first position of the largest hit in the strip");
   G__memvar_setup((void*)((long)(&p->energyDep)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energyDep=",0,"The total energy deposited");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sgsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WorldSetup */
static void G__setup_memvarWorldSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sgsCintLN_WorldSetup));
   { WorldSetup *p; p=(WorldSetup*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->minervaStrips)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"minervaStrips=",0,"/< Rectangular or toblerone strips   ");
   G__memvar_setup((void*)((long)(&p->muonGenerationArea)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"muonGenerationArea=",0,"/< The area (in m^2) over which the muons were generated");
   G__memvar_setup((void*)((long)(&p->worldSize)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"worldSize=",0,"/< Size of world in m");
   G__memvar_setup((void*)((long)(&p->scintLength)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"scintLength=",0,"/< Length of square scintillator planes in m");
   G__memvar_setup((void*)((long)(&p->planesPerSide)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"planesPerSide=",0,"/< Number of scintillator planes per side");
   G__memvar_setup((void*)((long)(&p->stripsPerPlane)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"stripsPerPlane=",0,"/< Number of strips per plane");
   G__memvar_setup((void*)((long)(&p->planeWidth)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"planeWidth=",0,"/< Plane width in m");
   G__memvar_setup((void*)((long)(&p->gapBetweenPlanes)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"gapBetweenPlanes=",0,"/< Gap between planes in m");
   G__memvar_setup((void*)((long)(&p->verticalSeparation)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"verticalSeparation=",0,"/< Vertical Separation of Z-planes");
   G__memvar_setup((void*)((long)(&p->scintTriBase)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"scintTriBase=",0,"/< Base of toblerone triangle");
   G__memvar_setup((void*)((long)(&p->scintTriHeight)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"scintTriHeight=",0,"/<Height of toblerone triangle");
   G__memvar_setup((void*)((long)(&p->scintTriLengthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"scintTriLengthX=",0,"/< The length (y) of the X triangles");
   G__memvar_setup((void*)((long)(&p->scintTriLengthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"scintTriLengthY=",0,"/< The length (x) of the Y triangles");
   G__memvar_setup((void*)((long)(&p->numScintTriX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numScintTriX=",0,"/< The number of X scintillator triangles");
   G__memvar_setup((void*)((long)(&p->numScintTriY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numScintTriY=",0,"/< The number of Y scintillator triangles");
   G__memvar_setup((void*)((long)(&p->background)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"background=",0,"/< 0 means target present");
   G__memvar_setup((void*)((long)(&p->sphereRadius)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sphereRadius=",0,"/< Radius of sphere in m");
   G__memvar_setup((void*)((long)(&p->sphereDensity)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sphereDensity=",0,"/< Density in kg/m3");
   G__memvar_setup((void*)((long)(&p->sphereOriginX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sphereOriginX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sphereOriginY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sphereOriginY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sphereOriginZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sphereOriginZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->realOrFakeContainer)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"realOrFakeContainer=",0,"/< GDML model, or 5mm box");
   G__memvar_setup((void*)((long)(&p->waterTankFlag)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"waterTankFlag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->steelBoxFlag)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"steelBoxFlag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->waterBoxHalfSide)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"waterBoxHalfSide=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->waterBoxSteelThickness)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"waterBoxSteelThickness=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->steelBoxX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"steelBoxX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->steelBoxY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"steelBoxY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->steelBoxZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"steelBoxZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->steelBoxHalfSide)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"steelBoxHalfSide=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->steelThickness)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"steelThickness=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sgsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarsgsCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncScintHitInfo(void) {
   /* ScintHitInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo));
   G__memfunc_setup("ScintHitInfo",1202,G__sgsCint_136_0_1, 105, G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScintHitInfo",1202,G__sgsCint_136_0_2, 105, G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - tSide i - 'Int_t' 0 - tPlane "
"i - 'Int_t' 0 - tStrip D - 'Double_t' 0 - tPos "
"d - 'Double_t' 0 - tEnergyDep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sgsCint_136_0_3, 85, G__get_linked_tagnum(&G__sgsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&ScintHitInfo::Class), 0);
   G__memfunc_setup("Class_Name",982,G__sgsCint_136_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ScintHitInfo::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__sgsCint_136_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&ScintHitInfo::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__sgsCint_136_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&ScintHitInfo::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sgsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sgsCint_136_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sgsCint_136_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ScintHitInfo::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sgsCint_136_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&ScintHitInfo::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__sgsCint_136_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&ScintHitInfo::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sgsCint_136_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&ScintHitInfo::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("ScintHitInfo", 1202, G__sgsCint_136_0_15, (int) ('i'), G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo), -1, 0, 1, 1, 1, 0, "u 'ScintHitInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ScintHitInfo", 1328, G__sgsCint_136_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sgsCint_136_0_17, (int) ('u'), G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo), -1, 1, 1, 1, 1, 0, "u 'ScintHitInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWorldSetup(void) {
   /* WorldSetup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sgsCintLN_WorldSetup));
   G__memfunc_setup("WorldSetup",1049,G__sgsCint_137_0_1, 105, G__get_linked_tagnum(&G__sgsCintLN_WorldSetup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sgsCint_137_0_2, 85, G__get_linked_tagnum(&G__sgsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&WorldSetup::Class), 0);
   G__memfunc_setup("Class_Name",982,G__sgsCint_137_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&WorldSetup::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__sgsCint_137_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&WorldSetup::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__sgsCint_137_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&WorldSetup::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sgsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sgsCint_137_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sgsCint_137_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&WorldSetup::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sgsCint_137_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&WorldSetup::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__sgsCint_137_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&WorldSetup::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sgsCint_137_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&WorldSetup::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("WorldSetup", 1049, G__sgsCint_137_0_14, (int) ('i'), G__get_linked_tagnum(&G__sgsCintLN_WorldSetup), -1, 0, 1, 1, 1, 0, "u 'WorldSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~WorldSetup", 1175, G__sgsCint_137_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sgsCint_137_0_16, (int) ('u'), G__get_linked_tagnum(&G__sgsCintLN_WorldSetup), -1, 1, 1, 1, 1, 0, "u 'WorldSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncsgsCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalsgsCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcsgsCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__sgsCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__sgsCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__sgsCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__sgsCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__sgsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__sgsCintLN_ScintHitInfo = { "ScintHitInfo" , 99 , -1 };
G__linked_taginfo G__sgsCintLN_WorldSetup = { "WorldSetup" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablesgsCint() {
  G__sgsCintLN_TClass.tagnum = -1 ;
  G__sgsCintLN_TBuffer.tagnum = -1 ;
  G__sgsCintLN_TMemberInspector.tagnum = -1 ;
  G__sgsCintLN_TObject.tagnum = -1 ;
  G__sgsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__sgsCintLN_ScintHitInfo.tagnum = -1 ;
  G__sgsCintLN_WorldSetup.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablesgsCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__sgsCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__sgsCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__sgsCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__sgsCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__sgsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__sgsCintLN_ScintHitInfo),sizeof(ScintHitInfo),-1,324864,"ScintHitInfo",G__setup_memvarScintHitInfo,G__setup_memfuncScintHitInfo);
   G__tagtable_setup(G__get_linked_tagnum(&G__sgsCintLN_WorldSetup),sizeof(WorldSetup),-1,292096,"WorldSetup",G__setup_memvarWorldSetup,G__setup_memfuncWorldSetup);
}
extern "C" void G__cpp_setupsgsCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupsgsCint()");
  G__set_cpp_environmentsgsCint();
  G__cpp_setup_tagtablesgsCint();

  G__cpp_setup_inheritancesgsCint();

  G__cpp_setup_typetablesgsCint();

  G__cpp_setup_memvarsgsCint();

  G__cpp_setup_memfuncsgsCint();
  G__cpp_setup_globalsgsCint();
  G__cpp_setup_funcsgsCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncsgsCint();
  return;
}
class G__cpp_setup_initsgsCint {
  public:
    G__cpp_setup_initsgsCint() { G__add_setup_func("sgsCint",(G__incsetup)(&G__cpp_setupsgsCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initsgsCint() { G__remove_setup_func("sgsCint"); }
};
G__cpp_setup_initsgsCint G__cpp_setup_initializersgsCint;

